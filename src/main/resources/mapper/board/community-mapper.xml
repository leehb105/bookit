<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="community">
	<select id="selectCommunityContent" parameterType="Integer" resultMap="communityMap">
	select 
	c.community_no, c.category, c.title, TO_CHAR(c.reg_date, 'YYYY-MM-DD  HH24:MI') reg_date , 
	c.read_count, c.like_count, c.member_id, c.content,
	(select count(*) from community_comment where community_no = c.community_no) comment_count, 
	(select m.nickname from member m where c.member_id = m.id) nickname,(select m.profile_image from member m where c.member_id = m.id) profile_image
	from community  c
	where c.community_no = #{no}
	</select>

	
	<resultMap type="map" id="communityMap">
		<id column="community_no" property="communityNo"/>
		<result column="title" property="title"/>
		<result column="member_id" property="memberId"/>
		<result column="content" property="content"/>
		<result column="reg_date" property="regDate"/>
		<result column="read_count" property="readCount"/>
		<result column="like_count" property="likeCount"/>
		<result column="category" property="category"/>
		<result column="report_yn" property="reportYn"/>
		<result column="delete_yn" property="deleteYn"/>
		<result column="comment_count" property="commentCount"/>
		<result column="nickname" property="nickname"/>	
		<result column="profile_image" property="profileImage"/>
	</resultMap>
	
	<select id="selectCommunityComment" parameterType="Integer" resultType="comment">
		select c.content, c.reg_date, c.writer, m.nickname, c.is_parent, c.no,  c.comment_level, c.delete_yn
		from community_comment c join member m on m.id = c.writer
		where c.community_no = #{no}
		and c.comment_level = 1 
		order by c.reg_date
	</select>
	<select id="selectCommunityReComment" parameterType="Integer" resultType="comment">
		select c.no, c.content, c.reg_date, c.writer, m.nickname, c.comment_ref, c.comment_level
		from community_comment c join member m on m.id = c.writer 
		where delete_yn = 'N' 
		and comment_ref = #{ref} 
		and comment_level = 2 
		order by reg_date
	</select>

	
	<select id="selectOneCommunityAttachment" parameterType="Integer" resultType="communityAttachment">
		select no, original_filename, renamed_filename, community_no from community_attachment where no = #{no} 
	</select>

	<select id="selectCommunityAttachment" parameterType="Integer" resultType="communityAttachment">
		select no, original_filename, renamed_filename, community_no from community_attachment where community_no = #{no} order by reg_date 
	</select>


	<update id="deleteCommunityContent" parameterType="Integer">
		update community set delete_yn = 'Y' where community_no = #{communiy_no}
	</update>
	
	<update id="updateCommunityContent" parameterType="map">
		update community set title = #{title}, content = #{content}, category = #{category} where community_no = #{communityNo}
	</update>
	
	<select id="getCommunityList" resultType="community" parameterType="map">
		select community_no, category, title, (select m.nickname from member m where c.member_id = m.id) nickname, 
		reg_date, read_count, like_count,(select count(*) from community_comment where community_no = c.community_no) comment_count 
		from community c where delete_yn = 'N' 
		
		<choose>
			<when test="category eq 'writer'">
			and m.nickname like '%' ||  #{keyword} || '%'
			</when>
			<otherwise>
			and (
			(c.title like '%' ||  #{keyword} || '%') or 
			(c.content like '%' ||  #{keyword} || '%')
			)
			</otherwise>
			</choose>
			
		order by reg_date desc
	</select>
	
	<select id="getTotalCommunityContent" resultType="Integer">
		select	count(*) from community
	</select>
	
		<insert id="insertCommunity" parameterType="communityTest">
		insert into
			community(community_no, category, title, member_id, content)
		values(
			SEQ_COMMUNITY_COMMUNITY_NO.nextval,
			#{category},
			#{title},
			#{memberId},
			#{content}
		)
	</insert>
	
	<insert id="insertCommunityAttachment" parameterType="communityAttachment">
		insert into
			community_attachment(no, community_no, original_filename, renamed_filename)
		values(
			seq_community_attachment_no.nextval,
			#{communityNo},
			#{originalFilename},
			#{renamedFilename}
		)
	</insert>
	<select id="getCommunityNoCurrval" resultType="Integer">
	select SEQ_COMMUNITY_COMMUNITY_NO.currval from dual
	</select>
	
	
	<select id="writerCheck" resultType="String" parameterType="Integer">
		select member_id from community where community_no=#{no} 
	</select>
	
	
	<!-- 댓글 -->
	<insert id="insertComment" parameterType="comment">
		insert into community_comment (community_no, no, content, writer, comment_level) values(
			#{communityNo},
			SEQ_COMMUNITY_COMMENT_NO.nextval,
			#{content},
			#{writer},
			1
		)
	</insert>
	<update id="setIsParent" parameterType="comment" >
		update community_comment set is_parent = #{isParent} where no = #{no}
	</update>
	
	<select id="readComment" resultType="comment">
		select * from community_comment where no = #{no}
	</select> 
	<delete id="deleteComment">
		update community_comment set deleteYn ='Y' where no = #{no}
	</delete>
	<update id="updateComment" parameterType="comment">
		update community_comment set content = #{content} where no = #{no} 
	</update>
	<!-- 대댓글 -->
		<insert id="insertReComment" parameterType="comment">
		insert into community_comment (community_no, no, content, writer, comment_ref, comment_level) values(
			#{communityNo},
			SEQ_COMMUNITY_COMMENT_NO.nextval,
			#{content},
			#{writer},
			#{commentRef},
			2
		)
		</insert>
	
	<!-- 조회수 -->
	<update id="updateReadCount">
		update community set read_count = read_count + 1 where community_no = #{no}
	</update>
	
	<!-- 좋아요 -->
	 <update id="likeCountUp" parameterType="HashMap">
    update community set like_count = like_count + 1 
    where community_no=#{communityNo}
  </update>
  
  <update id="likeCountDown" parameterType="HashMap">
    update community set like_count = like_count - 1 
    where community_no=#{communityNo}
  </update>
 
 	<insert id="communityLike" parameterType="map">
 		insert into community_like (like_no, community_no, member_id) values (seq_community_like.nextval, #{communityNo}, #{memberId})
 	</insert>
	<delete id="communityLikeCancel" parameterType="Integer">
	    delete from community_like where like_no = #{communityNo}
	</delete>
	
	<select id ="isUserLikeCommunity" parameterType="map" resultType="Integer">
		select count(*) from community_like where member_id = #{memberId} and community_no = #{communityNo}
	</select>
	
	<!-- 검색 -->
	<select id="searchCommuntiy" parameterType="map" resultType="community">
	select * from community c 
	join member m on m.id = c.member_id
	where c.delete_yn = 'N'
	<choose>
	<when test="category eq 'writer'">
	and m.nickname like '%' ||  #{keyword} || '%'
	</when>
	<otherwise>
	and (c.title like '%' ||  #{keyword} || '%') 
	or (c.content like '%' ||  #{keyword} || '%')
	</otherwise>
	</choose>
	
	order by c.reg_date
	</select>

	<select id="selectSearchCommuntiyContentCount" parameterType="map" resultType="Integer">
	select count(*) 
	 from community c where delete_yn = 'N' 
		
		<choose>
			<when test="category eq 'writer'">
			and m.nickname like '%' ||  #{keyword} || '%'
			</when>
			<otherwise>
			and (c.title like '%' ||  #{keyword} || '%') 
			or (c.content like '%' ||  #{keyword} || '%')
			</otherwise>
			</choose>
	
	</select>

</mapper>

